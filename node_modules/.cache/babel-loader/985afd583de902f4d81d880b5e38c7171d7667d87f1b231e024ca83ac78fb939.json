{"ast":null,"code":"var _jsxFileName = \"C:\\\\Local\\\\Projet_Perso\\\\React\\\\movie-picker\\\\src\\\\components\\\\Filtre.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useMemo } from \"react\";\nimport Home from \"./Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Filtre(propos) {\n  _s();\n  const [genres, setGenres] = useState([{\n    id: 0,\n    value: 'Genre?'\n  }]);\n  /*\r\n  const [filtres, setFiltres] = useState([\r\n      {id: 0, value: 'all', name:'All'},\r\n      {id: 1, value: 'now_playing', name:'Now Playing'},\r\n      {id: 2, value: 'popular', name: 'Popular'},\r\n      {id: 3, value: 'top_rated', name: 'Top Rated'},\r\n      {id: 4, value: 'upcoming', name: 'Upcoming'},\r\n  ]);\r\n  */\n  const fetchGenres = useMemo(async () => {\n    try {\n      const response = await fetch(\"https://api.themoviedb.org/3/genre/movie/list?api_key=92b418e837b833be308bbfb1fb2aca1e\");\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch genre options\");\n      }\n      const data = await response.json();\n      const optionsGenres = data.genres.map(genre => {\n        return {\n          id: genre.id,\n          value: genre.name\n        };\n      });\n      setGenres([...genres, ...optionsGenres]);\n    } catch (error) {\n      console.error(error);\n      // Handle the error\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Which movie you want to see ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: propos.selectOption,\n      onChange: propos.handleOption,\n      children: genres.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: option.id,\n        children: option.value\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: propos.selectionFiltre,\n      onChange: propos.handleFiltreOption,\n      children: filtres.map(filtre => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: filtre.value,\n        children: filtre.name\n      }, Math.random(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 13\n  }, this);\n}\n_s(Filtre, \"lkWvdauVA8q42nE4wp+4XlskZVI=\");\n_c = Filtre;\nexport default Filtre;\nvar _c;\n$RefreshReg$(_c, \"Filtre\");","map":{"version":3,"names":["React","useEffect","useState","useMemo","Home","jsxDEV","_jsxDEV","Filtre","propos","_s","genres","setGenres","id","value","fetchGenres","response","fetch","ok","Error","data","json","optionsGenres","map","genre","name","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","selectOption","onChange","handleOption","option","Math","random","selectionFiltre","handleFiltreOption","filtres","filtre","_c","$RefreshReg$"],"sources":["C:/Local/Projet_Perso/React/movie-picker/src/components/Filtre.js"],"sourcesContent":["import React, {useEffect, useState, useMemo} from \"react\";\r\nimport Home from \"./Home\";\r\n\r\nfunction Filtre(propos){\r\n    const [genres, setGenres] = useState([{id:0, value:'Genre?'}]);\r\n    /*\r\n    const [filtres, setFiltres] = useState([\r\n        {id: 0, value: 'all', name:'All'},\r\n        {id: 1, value: 'now_playing', name:'Now Playing'},\r\n        {id: 2, value: 'popular', name: 'Popular'},\r\n        {id: 3, value: 'top_rated', name: 'Top Rated'},\r\n        {id: 4, value: 'upcoming', name: 'Upcoming'},\r\n    ]);\r\n    */\r\n    const fetchGenres = useMemo(async () => {\r\n      try {\r\n        const response = await fetch(\r\n          \"https://api.themoviedb.org/3/genre/movie/list?api_key=92b418e837b833be308bbfb1fb2aca1e\"\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch genre options\");\r\n        }\r\n        const data = await response.json();\r\n        const optionsGenres = data.genres.map((genre) => {\r\n          return {\r\n            id: genre.id,\r\n            value: genre.name,\r\n          }; \r\n        });\r\n        setGenres([...genres,...optionsGenres]);\r\n      } catch (error) {\r\n        console.error(error);\r\n        // Handle the error\r\n      }\r\n    }, []);\r\n  \r\n    return (<div> \r\n        <h1>Which movie you want to see ?</h1>\r\n        <select value={propos.selectOption} onChange={propos.handleOption}>\r\n          {genres.map((option) => (\r\n            <option key={Math.random()} value={option.id}>\r\n              {option.value}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <select value={propos.selectionFiltre} onChange={propos.handleFiltreOption}>\r\n          {filtres.map((filtre) => (\r\n            <option key={Math.random()} value={filtre.value}>\r\n              {filtre.name}\r\n            </option>\r\n          ))}\r\n        </select>\r\n    </div>)\r\n\r\n}\r\n\r\nexport default Filtre;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,SAAS,EAAEC,QAAQ,EAAEC,OAAO,QAAO,OAAO;AACzD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,MAAMA,CAACC,MAAM,EAAC;EAAAC,EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,CAAC;IAACU,EAAE,EAAC,CAAC;IAAEC,KAAK,EAAC;EAAQ,CAAC,CAAC,CAAC;EAC9D;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMC,WAAW,GAAGX,OAAO,CAAC,YAAY;IACtC,IAAI;MACF,MAAMY,QAAQ,GAAG,MAAMC,KAAK,CAC1B,wFACF,CAAC;MACD,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;MAClD;MACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MAClC,MAAMC,aAAa,GAAGF,IAAI,CAACT,MAAM,CAACY,GAAG,CAAEC,KAAK,IAAK;QAC/C,OAAO;UACLX,EAAE,EAAEW,KAAK,CAACX,EAAE;UACZC,KAAK,EAAEU,KAAK,CAACC;QACf,CAAC;MACH,CAAC,CAAC;MACFb,SAAS,CAAC,CAAC,GAAGD,MAAM,EAAC,GAAGW,aAAa,CAAC,CAAC;IACzC,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACpB;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAQnB,OAAA;IAAAqB,QAAA,gBACJrB,OAAA;MAAAqB,QAAA,EAAI;IAA6B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtCzB,OAAA;MAAQO,KAAK,EAAEL,MAAM,CAACwB,YAAa;MAACC,QAAQ,EAAEzB,MAAM,CAAC0B,YAAa;MAAAP,QAAA,EAC/DjB,MAAM,CAACY,GAAG,CAAEa,MAAM,iBACjB7B,OAAA;QAA4BO,KAAK,EAAEsB,MAAM,CAACvB,EAAG;QAAAe,QAAA,EAC1CQ,MAAM,CAACtB;MAAK,GADFuB,IAAI,CAACC,MAAM,CAAC,CAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAElB,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC,eACTzB,OAAA;MAAQO,KAAK,EAAEL,MAAM,CAAC8B,eAAgB;MAACL,QAAQ,EAAEzB,MAAM,CAAC+B,kBAAmB;MAAAZ,QAAA,EACxEa,OAAO,CAAClB,GAAG,CAAEmB,MAAM,iBAClBnC,OAAA;QAA4BO,KAAK,EAAE4B,MAAM,CAAC5B,KAAM;QAAAc,QAAA,EAC7Cc,MAAM,CAACjB;MAAI,GADDY,IAAI,CAACC,MAAM,CAAC,CAAC;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAElB,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEV;AAACtB,EAAA,CAnDQF,MAAM;AAAAmC,EAAA,GAANnC,MAAM;AAqDf,eAAeA,MAAM;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}